// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2019 17:59:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    extensor_sinal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module extensor_sinal_vlg_sample_tst(
	contador,
	instrucao,
	sampler_tx
);
input [11:0] contador;
input [31:0] instrucao;
output sampler_tx;

reg sample;
time current_time;
always @(contador or instrucao)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module extensor_sinal_vlg_check_tst (
	contador_64,
	instrucao_64,
	sampler_rx
);
input [63:0] contador_64;
input [63:0] instrucao_64;
input sampler_rx;

reg [63:0] contador_64_expected;
reg [63:0] instrucao_64_expected;

reg [63:0] contador_64_prev;
reg [63:0] instrucao_64_prev;

reg [63:0] contador_64_expected_prev;
reg [63:0] instrucao_64_expected_prev;

reg [63:0] last_contador_64_exp;
reg [63:0] last_instrucao_64_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	contador_64_prev = contador_64;
	instrucao_64_prev = instrucao_64;
end

// update expected /o prevs

always @(trigger)
begin
	contador_64_expected_prev = contador_64_expected;
	instrucao_64_expected_prev = instrucao_64_expected;
end


// expected contador_64[ 63 ]
initial
begin
	contador_64_expected[63] = 1'bX;
end 
// expected contador_64[ 62 ]
initial
begin
	contador_64_expected[62] = 1'bX;
end 
// expected contador_64[ 61 ]
initial
begin
	contador_64_expected[61] = 1'bX;
end 
// expected contador_64[ 60 ]
initial
begin
	contador_64_expected[60] = 1'bX;
end 
// expected contador_64[ 59 ]
initial
begin
	contador_64_expected[59] = 1'bX;
end 
// expected contador_64[ 58 ]
initial
begin
	contador_64_expected[58] = 1'bX;
end 
// expected contador_64[ 57 ]
initial
begin
	contador_64_expected[57] = 1'bX;
end 
// expected contador_64[ 56 ]
initial
begin
	contador_64_expected[56] = 1'bX;
end 
// expected contador_64[ 55 ]
initial
begin
	contador_64_expected[55] = 1'bX;
end 
// expected contador_64[ 54 ]
initial
begin
	contador_64_expected[54] = 1'bX;
end 
// expected contador_64[ 53 ]
initial
begin
	contador_64_expected[53] = 1'bX;
end 
// expected contador_64[ 52 ]
initial
begin
	contador_64_expected[52] = 1'bX;
end 
// expected contador_64[ 51 ]
initial
begin
	contador_64_expected[51] = 1'bX;
end 
// expected contador_64[ 50 ]
initial
begin
	contador_64_expected[50] = 1'bX;
end 
// expected contador_64[ 49 ]
initial
begin
	contador_64_expected[49] = 1'bX;
end 
// expected contador_64[ 48 ]
initial
begin
	contador_64_expected[48] = 1'bX;
end 
// expected contador_64[ 47 ]
initial
begin
	contador_64_expected[47] = 1'bX;
end 
// expected contador_64[ 46 ]
initial
begin
	contador_64_expected[46] = 1'bX;
end 
// expected contador_64[ 45 ]
initial
begin
	contador_64_expected[45] = 1'bX;
end 
// expected contador_64[ 44 ]
initial
begin
	contador_64_expected[44] = 1'bX;
end 
// expected contador_64[ 43 ]
initial
begin
	contador_64_expected[43] = 1'bX;
end 
// expected contador_64[ 42 ]
initial
begin
	contador_64_expected[42] = 1'bX;
end 
// expected contador_64[ 41 ]
initial
begin
	contador_64_expected[41] = 1'bX;
end 
// expected contador_64[ 40 ]
initial
begin
	contador_64_expected[40] = 1'bX;
end 
// expected contador_64[ 39 ]
initial
begin
	contador_64_expected[39] = 1'bX;
end 
// expected contador_64[ 38 ]
initial
begin
	contador_64_expected[38] = 1'bX;
end 
// expected contador_64[ 37 ]
initial
begin
	contador_64_expected[37] = 1'bX;
end 
// expected contador_64[ 36 ]
initial
begin
	contador_64_expected[36] = 1'bX;
end 
// expected contador_64[ 35 ]
initial
begin
	contador_64_expected[35] = 1'bX;
end 
// expected contador_64[ 34 ]
initial
begin
	contador_64_expected[34] = 1'bX;
end 
// expected contador_64[ 33 ]
initial
begin
	contador_64_expected[33] = 1'bX;
end 
// expected contador_64[ 32 ]
initial
begin
	contador_64_expected[32] = 1'bX;
end 
// expected contador_64[ 31 ]
initial
begin
	contador_64_expected[31] = 1'bX;
end 
// expected contador_64[ 30 ]
initial
begin
	contador_64_expected[30] = 1'bX;
end 
// expected contador_64[ 29 ]
initial
begin
	contador_64_expected[29] = 1'bX;
end 
// expected contador_64[ 28 ]
initial
begin
	contador_64_expected[28] = 1'bX;
end 
// expected contador_64[ 27 ]
initial
begin
	contador_64_expected[27] = 1'bX;
end 
// expected contador_64[ 26 ]
initial
begin
	contador_64_expected[26] = 1'bX;
end 
// expected contador_64[ 25 ]
initial
begin
	contador_64_expected[25] = 1'bX;
end 
// expected contador_64[ 24 ]
initial
begin
	contador_64_expected[24] = 1'bX;
end 
// expected contador_64[ 23 ]
initial
begin
	contador_64_expected[23] = 1'bX;
end 
// expected contador_64[ 22 ]
initial
begin
	contador_64_expected[22] = 1'bX;
end 
// expected contador_64[ 21 ]
initial
begin
	contador_64_expected[21] = 1'bX;
end 
// expected contador_64[ 20 ]
initial
begin
	contador_64_expected[20] = 1'bX;
end 
// expected contador_64[ 19 ]
initial
begin
	contador_64_expected[19] = 1'bX;
end 
// expected contador_64[ 18 ]
initial
begin
	contador_64_expected[18] = 1'bX;
end 
// expected contador_64[ 17 ]
initial
begin
	contador_64_expected[17] = 1'bX;
end 
// expected contador_64[ 16 ]
initial
begin
	contador_64_expected[16] = 1'bX;
end 
// expected contador_64[ 15 ]
initial
begin
	contador_64_expected[15] = 1'bX;
end 
// expected contador_64[ 14 ]
initial
begin
	contador_64_expected[14] = 1'bX;
end 
// expected contador_64[ 13 ]
initial
begin
	contador_64_expected[13] = 1'bX;
end 
// expected contador_64[ 12 ]
initial
begin
	contador_64_expected[12] = 1'bX;
end 
// expected contador_64[ 11 ]
initial
begin
	contador_64_expected[11] = 1'bX;
end 
// expected contador_64[ 10 ]
initial
begin
	contador_64_expected[10] = 1'bX;
end 
// expected contador_64[ 9 ]
initial
begin
	contador_64_expected[9] = 1'bX;
end 
// expected contador_64[ 8 ]
initial
begin
	contador_64_expected[8] = 1'bX;
end 
// expected contador_64[ 7 ]
initial
begin
	contador_64_expected[7] = 1'bX;
end 
// expected contador_64[ 6 ]
initial
begin
	contador_64_expected[6] = 1'bX;
end 
// expected contador_64[ 5 ]
initial
begin
	contador_64_expected[5] = 1'bX;
end 
// expected contador_64[ 4 ]
initial
begin
	contador_64_expected[4] = 1'bX;
end 
// expected contador_64[ 3 ]
initial
begin
	contador_64_expected[3] = 1'bX;
end 
// expected contador_64[ 2 ]
initial
begin
	contador_64_expected[2] = 1'bX;
end 
// expected contador_64[ 1 ]
initial
begin
	contador_64_expected[1] = 1'bX;
end 
// expected contador_64[ 0 ]
initial
begin
	contador_64_expected[0] = 1'bX;
end 
// expected instrucao_64[ 63 ]
initial
begin
	instrucao_64_expected[63] = 1'bX;
end 
// expected instrucao_64[ 62 ]
initial
begin
	instrucao_64_expected[62] = 1'bX;
end 
// expected instrucao_64[ 61 ]
initial
begin
	instrucao_64_expected[61] = 1'bX;
end 
// expected instrucao_64[ 60 ]
initial
begin
	instrucao_64_expected[60] = 1'bX;
end 
// expected instrucao_64[ 59 ]
initial
begin
	instrucao_64_expected[59] = 1'bX;
end 
// expected instrucao_64[ 58 ]
initial
begin
	instrucao_64_expected[58] = 1'bX;
end 
// expected instrucao_64[ 57 ]
initial
begin
	instrucao_64_expected[57] = 1'bX;
end 
// expected instrucao_64[ 56 ]
initial
begin
	instrucao_64_expected[56] = 1'bX;
end 
// expected instrucao_64[ 55 ]
initial
begin
	instrucao_64_expected[55] = 1'bX;
end 
// expected instrucao_64[ 54 ]
initial
begin
	instrucao_64_expected[54] = 1'bX;
end 
// expected instrucao_64[ 53 ]
initial
begin
	instrucao_64_expected[53] = 1'bX;
end 
// expected instrucao_64[ 52 ]
initial
begin
	instrucao_64_expected[52] = 1'bX;
end 
// expected instrucao_64[ 51 ]
initial
begin
	instrucao_64_expected[51] = 1'bX;
end 
// expected instrucao_64[ 50 ]
initial
begin
	instrucao_64_expected[50] = 1'bX;
end 
// expected instrucao_64[ 49 ]
initial
begin
	instrucao_64_expected[49] = 1'bX;
end 
// expected instrucao_64[ 48 ]
initial
begin
	instrucao_64_expected[48] = 1'bX;
end 
// expected instrucao_64[ 47 ]
initial
begin
	instrucao_64_expected[47] = 1'bX;
end 
// expected instrucao_64[ 46 ]
initial
begin
	instrucao_64_expected[46] = 1'bX;
end 
// expected instrucao_64[ 45 ]
initial
begin
	instrucao_64_expected[45] = 1'bX;
end 
// expected instrucao_64[ 44 ]
initial
begin
	instrucao_64_expected[44] = 1'bX;
end 
// expected instrucao_64[ 43 ]
initial
begin
	instrucao_64_expected[43] = 1'bX;
end 
// expected instrucao_64[ 42 ]
initial
begin
	instrucao_64_expected[42] = 1'bX;
end 
// expected instrucao_64[ 41 ]
initial
begin
	instrucao_64_expected[41] = 1'bX;
end 
// expected instrucao_64[ 40 ]
initial
begin
	instrucao_64_expected[40] = 1'bX;
end 
// expected instrucao_64[ 39 ]
initial
begin
	instrucao_64_expected[39] = 1'bX;
end 
// expected instrucao_64[ 38 ]
initial
begin
	instrucao_64_expected[38] = 1'bX;
end 
// expected instrucao_64[ 37 ]
initial
begin
	instrucao_64_expected[37] = 1'bX;
end 
// expected instrucao_64[ 36 ]
initial
begin
	instrucao_64_expected[36] = 1'bX;
end 
// expected instrucao_64[ 35 ]
initial
begin
	instrucao_64_expected[35] = 1'bX;
end 
// expected instrucao_64[ 34 ]
initial
begin
	instrucao_64_expected[34] = 1'bX;
end 
// expected instrucao_64[ 33 ]
initial
begin
	instrucao_64_expected[33] = 1'bX;
end 
// expected instrucao_64[ 32 ]
initial
begin
	instrucao_64_expected[32] = 1'bX;
end 
// expected instrucao_64[ 31 ]
initial
begin
	instrucao_64_expected[31] = 1'bX;
end 
// expected instrucao_64[ 30 ]
initial
begin
	instrucao_64_expected[30] = 1'bX;
end 
// expected instrucao_64[ 29 ]
initial
begin
	instrucao_64_expected[29] = 1'bX;
end 
// expected instrucao_64[ 28 ]
initial
begin
	instrucao_64_expected[28] = 1'bX;
end 
// expected instrucao_64[ 27 ]
initial
begin
	instrucao_64_expected[27] = 1'bX;
end 
// expected instrucao_64[ 26 ]
initial
begin
	instrucao_64_expected[26] = 1'bX;
end 
// expected instrucao_64[ 25 ]
initial
begin
	instrucao_64_expected[25] = 1'bX;
end 
// expected instrucao_64[ 24 ]
initial
begin
	instrucao_64_expected[24] = 1'bX;
end 
// expected instrucao_64[ 23 ]
initial
begin
	instrucao_64_expected[23] = 1'bX;
end 
// expected instrucao_64[ 22 ]
initial
begin
	instrucao_64_expected[22] = 1'bX;
end 
// expected instrucao_64[ 21 ]
initial
begin
	instrucao_64_expected[21] = 1'bX;
end 
// expected instrucao_64[ 20 ]
initial
begin
	instrucao_64_expected[20] = 1'bX;
end 
// expected instrucao_64[ 19 ]
initial
begin
	instrucao_64_expected[19] = 1'bX;
end 
// expected instrucao_64[ 18 ]
initial
begin
	instrucao_64_expected[18] = 1'bX;
end 
// expected instrucao_64[ 17 ]
initial
begin
	instrucao_64_expected[17] = 1'bX;
end 
// expected instrucao_64[ 16 ]
initial
begin
	instrucao_64_expected[16] = 1'bX;
end 
// expected instrucao_64[ 15 ]
initial
begin
	instrucao_64_expected[15] = 1'bX;
end 
// expected instrucao_64[ 14 ]
initial
begin
	instrucao_64_expected[14] = 1'bX;
end 
// expected instrucao_64[ 13 ]
initial
begin
	instrucao_64_expected[13] = 1'bX;
end 
// expected instrucao_64[ 12 ]
initial
begin
	instrucao_64_expected[12] = 1'bX;
end 
// expected instrucao_64[ 11 ]
initial
begin
	instrucao_64_expected[11] = 1'bX;
end 
// expected instrucao_64[ 10 ]
initial
begin
	instrucao_64_expected[10] = 1'bX;
end 
// expected instrucao_64[ 9 ]
initial
begin
	instrucao_64_expected[9] = 1'bX;
end 
// expected instrucao_64[ 8 ]
initial
begin
	instrucao_64_expected[8] = 1'bX;
end 
// expected instrucao_64[ 7 ]
initial
begin
	instrucao_64_expected[7] = 1'bX;
end 
// expected instrucao_64[ 6 ]
initial
begin
	instrucao_64_expected[6] = 1'bX;
end 
// expected instrucao_64[ 5 ]
initial
begin
	instrucao_64_expected[5] = 1'bX;
end 
// expected instrucao_64[ 4 ]
initial
begin
	instrucao_64_expected[4] = 1'bX;
end 
// expected instrucao_64[ 3 ]
initial
begin
	instrucao_64_expected[3] = 1'bX;
end 
// expected instrucao_64[ 2 ]
initial
begin
	instrucao_64_expected[2] = 1'bX;
end 
// expected instrucao_64[ 1 ]
initial
begin
	instrucao_64_expected[1] = 1'bX;
end 
// expected instrucao_64[ 0 ]
initial
begin
	instrucao_64_expected[0] = 1'bX;
end 
// generate trigger
always @(contador_64_expected or contador_64 or instrucao_64_expected or instrucao_64)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected contador_64 = %b | expected instrucao_64 = %b | ",contador_64_expected_prev,instrucao_64_expected_prev);
	$display("| real contador_64 = %b | real instrucao_64 = %b | ",contador_64_prev,instrucao_64_prev);
`endif
	if (
		( contador_64_expected_prev[0] !== 1'bx ) && ( contador_64_prev[0] !== contador_64_expected_prev[0] )
		&& ((contador_64_expected_prev[0] !== last_contador_64_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[0] = contador_64_expected_prev[0];
	end
	if (
		( contador_64_expected_prev[1] !== 1'bx ) && ( contador_64_prev[1] !== contador_64_expected_prev[1] )
		&& ((contador_64_expected_prev[1] !== last_contador_64_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[1] = contador_64_expected_prev[1];
	end
	if (
		( contador_64_expected_prev[2] !== 1'bx ) && ( contador_64_prev[2] !== contador_64_expected_prev[2] )
		&& ((contador_64_expected_prev[2] !== last_contador_64_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[2] = contador_64_expected_prev[2];
	end
	if (
		( contador_64_expected_prev[3] !== 1'bx ) && ( contador_64_prev[3] !== contador_64_expected_prev[3] )
		&& ((contador_64_expected_prev[3] !== last_contador_64_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[3] = contador_64_expected_prev[3];
	end
	if (
		( contador_64_expected_prev[4] !== 1'bx ) && ( contador_64_prev[4] !== contador_64_expected_prev[4] )
		&& ((contador_64_expected_prev[4] !== last_contador_64_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[4] = contador_64_expected_prev[4];
	end
	if (
		( contador_64_expected_prev[5] !== 1'bx ) && ( contador_64_prev[5] !== contador_64_expected_prev[5] )
		&& ((contador_64_expected_prev[5] !== last_contador_64_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[5] = contador_64_expected_prev[5];
	end
	if (
		( contador_64_expected_prev[6] !== 1'bx ) && ( contador_64_prev[6] !== contador_64_expected_prev[6] )
		&& ((contador_64_expected_prev[6] !== last_contador_64_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[6] = contador_64_expected_prev[6];
	end
	if (
		( contador_64_expected_prev[7] !== 1'bx ) && ( contador_64_prev[7] !== contador_64_expected_prev[7] )
		&& ((contador_64_expected_prev[7] !== last_contador_64_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[7] = contador_64_expected_prev[7];
	end
	if (
		( contador_64_expected_prev[8] !== 1'bx ) && ( contador_64_prev[8] !== contador_64_expected_prev[8] )
		&& ((contador_64_expected_prev[8] !== last_contador_64_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[8] = contador_64_expected_prev[8];
	end
	if (
		( contador_64_expected_prev[9] !== 1'bx ) && ( contador_64_prev[9] !== contador_64_expected_prev[9] )
		&& ((contador_64_expected_prev[9] !== last_contador_64_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[9] = contador_64_expected_prev[9];
	end
	if (
		( contador_64_expected_prev[10] !== 1'bx ) && ( contador_64_prev[10] !== contador_64_expected_prev[10] )
		&& ((contador_64_expected_prev[10] !== last_contador_64_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[10] = contador_64_expected_prev[10];
	end
	if (
		( contador_64_expected_prev[11] !== 1'bx ) && ( contador_64_prev[11] !== contador_64_expected_prev[11] )
		&& ((contador_64_expected_prev[11] !== last_contador_64_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[11] = contador_64_expected_prev[11];
	end
	if (
		( contador_64_expected_prev[12] !== 1'bx ) && ( contador_64_prev[12] !== contador_64_expected_prev[12] )
		&& ((contador_64_expected_prev[12] !== last_contador_64_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[12] = contador_64_expected_prev[12];
	end
	if (
		( contador_64_expected_prev[13] !== 1'bx ) && ( contador_64_prev[13] !== contador_64_expected_prev[13] )
		&& ((contador_64_expected_prev[13] !== last_contador_64_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[13] = contador_64_expected_prev[13];
	end
	if (
		( contador_64_expected_prev[14] !== 1'bx ) && ( contador_64_prev[14] !== contador_64_expected_prev[14] )
		&& ((contador_64_expected_prev[14] !== last_contador_64_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[14] = contador_64_expected_prev[14];
	end
	if (
		( contador_64_expected_prev[15] !== 1'bx ) && ( contador_64_prev[15] !== contador_64_expected_prev[15] )
		&& ((contador_64_expected_prev[15] !== last_contador_64_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[15] = contador_64_expected_prev[15];
	end
	if (
		( contador_64_expected_prev[16] !== 1'bx ) && ( contador_64_prev[16] !== contador_64_expected_prev[16] )
		&& ((contador_64_expected_prev[16] !== last_contador_64_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[16] = contador_64_expected_prev[16];
	end
	if (
		( contador_64_expected_prev[17] !== 1'bx ) && ( contador_64_prev[17] !== contador_64_expected_prev[17] )
		&& ((contador_64_expected_prev[17] !== last_contador_64_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[17] = contador_64_expected_prev[17];
	end
	if (
		( contador_64_expected_prev[18] !== 1'bx ) && ( contador_64_prev[18] !== contador_64_expected_prev[18] )
		&& ((contador_64_expected_prev[18] !== last_contador_64_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[18] = contador_64_expected_prev[18];
	end
	if (
		( contador_64_expected_prev[19] !== 1'bx ) && ( contador_64_prev[19] !== contador_64_expected_prev[19] )
		&& ((contador_64_expected_prev[19] !== last_contador_64_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[19] = contador_64_expected_prev[19];
	end
	if (
		( contador_64_expected_prev[20] !== 1'bx ) && ( contador_64_prev[20] !== contador_64_expected_prev[20] )
		&& ((contador_64_expected_prev[20] !== last_contador_64_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[20] = contador_64_expected_prev[20];
	end
	if (
		( contador_64_expected_prev[21] !== 1'bx ) && ( contador_64_prev[21] !== contador_64_expected_prev[21] )
		&& ((contador_64_expected_prev[21] !== last_contador_64_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[21] = contador_64_expected_prev[21];
	end
	if (
		( contador_64_expected_prev[22] !== 1'bx ) && ( contador_64_prev[22] !== contador_64_expected_prev[22] )
		&& ((contador_64_expected_prev[22] !== last_contador_64_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[22] = contador_64_expected_prev[22];
	end
	if (
		( contador_64_expected_prev[23] !== 1'bx ) && ( contador_64_prev[23] !== contador_64_expected_prev[23] )
		&& ((contador_64_expected_prev[23] !== last_contador_64_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[23] = contador_64_expected_prev[23];
	end
	if (
		( contador_64_expected_prev[24] !== 1'bx ) && ( contador_64_prev[24] !== contador_64_expected_prev[24] )
		&& ((contador_64_expected_prev[24] !== last_contador_64_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[24] = contador_64_expected_prev[24];
	end
	if (
		( contador_64_expected_prev[25] !== 1'bx ) && ( contador_64_prev[25] !== contador_64_expected_prev[25] )
		&& ((contador_64_expected_prev[25] !== last_contador_64_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[25] = contador_64_expected_prev[25];
	end
	if (
		( contador_64_expected_prev[26] !== 1'bx ) && ( contador_64_prev[26] !== contador_64_expected_prev[26] )
		&& ((contador_64_expected_prev[26] !== last_contador_64_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[26] = contador_64_expected_prev[26];
	end
	if (
		( contador_64_expected_prev[27] !== 1'bx ) && ( contador_64_prev[27] !== contador_64_expected_prev[27] )
		&& ((contador_64_expected_prev[27] !== last_contador_64_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[27] = contador_64_expected_prev[27];
	end
	if (
		( contador_64_expected_prev[28] !== 1'bx ) && ( contador_64_prev[28] !== contador_64_expected_prev[28] )
		&& ((contador_64_expected_prev[28] !== last_contador_64_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[28] = contador_64_expected_prev[28];
	end
	if (
		( contador_64_expected_prev[29] !== 1'bx ) && ( contador_64_prev[29] !== contador_64_expected_prev[29] )
		&& ((contador_64_expected_prev[29] !== last_contador_64_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[29] = contador_64_expected_prev[29];
	end
	if (
		( contador_64_expected_prev[30] !== 1'bx ) && ( contador_64_prev[30] !== contador_64_expected_prev[30] )
		&& ((contador_64_expected_prev[30] !== last_contador_64_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[30] = contador_64_expected_prev[30];
	end
	if (
		( contador_64_expected_prev[31] !== 1'bx ) && ( contador_64_prev[31] !== contador_64_expected_prev[31] )
		&& ((contador_64_expected_prev[31] !== last_contador_64_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[31] = contador_64_expected_prev[31];
	end
	if (
		( contador_64_expected_prev[32] !== 1'bx ) && ( contador_64_prev[32] !== contador_64_expected_prev[32] )
		&& ((contador_64_expected_prev[32] !== last_contador_64_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[32] = contador_64_expected_prev[32];
	end
	if (
		( contador_64_expected_prev[33] !== 1'bx ) && ( contador_64_prev[33] !== contador_64_expected_prev[33] )
		&& ((contador_64_expected_prev[33] !== last_contador_64_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[33] = contador_64_expected_prev[33];
	end
	if (
		( contador_64_expected_prev[34] !== 1'bx ) && ( contador_64_prev[34] !== contador_64_expected_prev[34] )
		&& ((contador_64_expected_prev[34] !== last_contador_64_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[34] = contador_64_expected_prev[34];
	end
	if (
		( contador_64_expected_prev[35] !== 1'bx ) && ( contador_64_prev[35] !== contador_64_expected_prev[35] )
		&& ((contador_64_expected_prev[35] !== last_contador_64_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[35] = contador_64_expected_prev[35];
	end
	if (
		( contador_64_expected_prev[36] !== 1'bx ) && ( contador_64_prev[36] !== contador_64_expected_prev[36] )
		&& ((contador_64_expected_prev[36] !== last_contador_64_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[36] = contador_64_expected_prev[36];
	end
	if (
		( contador_64_expected_prev[37] !== 1'bx ) && ( contador_64_prev[37] !== contador_64_expected_prev[37] )
		&& ((contador_64_expected_prev[37] !== last_contador_64_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[37] = contador_64_expected_prev[37];
	end
	if (
		( contador_64_expected_prev[38] !== 1'bx ) && ( contador_64_prev[38] !== contador_64_expected_prev[38] )
		&& ((contador_64_expected_prev[38] !== last_contador_64_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[38] = contador_64_expected_prev[38];
	end
	if (
		( contador_64_expected_prev[39] !== 1'bx ) && ( contador_64_prev[39] !== contador_64_expected_prev[39] )
		&& ((contador_64_expected_prev[39] !== last_contador_64_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[39] = contador_64_expected_prev[39];
	end
	if (
		( contador_64_expected_prev[40] !== 1'bx ) && ( contador_64_prev[40] !== contador_64_expected_prev[40] )
		&& ((contador_64_expected_prev[40] !== last_contador_64_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[40] = contador_64_expected_prev[40];
	end
	if (
		( contador_64_expected_prev[41] !== 1'bx ) && ( contador_64_prev[41] !== contador_64_expected_prev[41] )
		&& ((contador_64_expected_prev[41] !== last_contador_64_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[41] = contador_64_expected_prev[41];
	end
	if (
		( contador_64_expected_prev[42] !== 1'bx ) && ( contador_64_prev[42] !== contador_64_expected_prev[42] )
		&& ((contador_64_expected_prev[42] !== last_contador_64_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[42] = contador_64_expected_prev[42];
	end
	if (
		( contador_64_expected_prev[43] !== 1'bx ) && ( contador_64_prev[43] !== contador_64_expected_prev[43] )
		&& ((contador_64_expected_prev[43] !== last_contador_64_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[43] = contador_64_expected_prev[43];
	end
	if (
		( contador_64_expected_prev[44] !== 1'bx ) && ( contador_64_prev[44] !== contador_64_expected_prev[44] )
		&& ((contador_64_expected_prev[44] !== last_contador_64_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[44] = contador_64_expected_prev[44];
	end
	if (
		( contador_64_expected_prev[45] !== 1'bx ) && ( contador_64_prev[45] !== contador_64_expected_prev[45] )
		&& ((contador_64_expected_prev[45] !== last_contador_64_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[45] = contador_64_expected_prev[45];
	end
	if (
		( contador_64_expected_prev[46] !== 1'bx ) && ( contador_64_prev[46] !== contador_64_expected_prev[46] )
		&& ((contador_64_expected_prev[46] !== last_contador_64_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[46] = contador_64_expected_prev[46];
	end
	if (
		( contador_64_expected_prev[47] !== 1'bx ) && ( contador_64_prev[47] !== contador_64_expected_prev[47] )
		&& ((contador_64_expected_prev[47] !== last_contador_64_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[47] = contador_64_expected_prev[47];
	end
	if (
		( contador_64_expected_prev[48] !== 1'bx ) && ( contador_64_prev[48] !== contador_64_expected_prev[48] )
		&& ((contador_64_expected_prev[48] !== last_contador_64_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[48] = contador_64_expected_prev[48];
	end
	if (
		( contador_64_expected_prev[49] !== 1'bx ) && ( contador_64_prev[49] !== contador_64_expected_prev[49] )
		&& ((contador_64_expected_prev[49] !== last_contador_64_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[49] = contador_64_expected_prev[49];
	end
	if (
		( contador_64_expected_prev[50] !== 1'bx ) && ( contador_64_prev[50] !== contador_64_expected_prev[50] )
		&& ((contador_64_expected_prev[50] !== last_contador_64_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[50] = contador_64_expected_prev[50];
	end
	if (
		( contador_64_expected_prev[51] !== 1'bx ) && ( contador_64_prev[51] !== contador_64_expected_prev[51] )
		&& ((contador_64_expected_prev[51] !== last_contador_64_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[51] = contador_64_expected_prev[51];
	end
	if (
		( contador_64_expected_prev[52] !== 1'bx ) && ( contador_64_prev[52] !== contador_64_expected_prev[52] )
		&& ((contador_64_expected_prev[52] !== last_contador_64_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[52] = contador_64_expected_prev[52];
	end
	if (
		( contador_64_expected_prev[53] !== 1'bx ) && ( contador_64_prev[53] !== contador_64_expected_prev[53] )
		&& ((contador_64_expected_prev[53] !== last_contador_64_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[53] = contador_64_expected_prev[53];
	end
	if (
		( contador_64_expected_prev[54] !== 1'bx ) && ( contador_64_prev[54] !== contador_64_expected_prev[54] )
		&& ((contador_64_expected_prev[54] !== last_contador_64_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[54] = contador_64_expected_prev[54];
	end
	if (
		( contador_64_expected_prev[55] !== 1'bx ) && ( contador_64_prev[55] !== contador_64_expected_prev[55] )
		&& ((contador_64_expected_prev[55] !== last_contador_64_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[55] = contador_64_expected_prev[55];
	end
	if (
		( contador_64_expected_prev[56] !== 1'bx ) && ( contador_64_prev[56] !== contador_64_expected_prev[56] )
		&& ((contador_64_expected_prev[56] !== last_contador_64_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[56] = contador_64_expected_prev[56];
	end
	if (
		( contador_64_expected_prev[57] !== 1'bx ) && ( contador_64_prev[57] !== contador_64_expected_prev[57] )
		&& ((contador_64_expected_prev[57] !== last_contador_64_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[57] = contador_64_expected_prev[57];
	end
	if (
		( contador_64_expected_prev[58] !== 1'bx ) && ( contador_64_prev[58] !== contador_64_expected_prev[58] )
		&& ((contador_64_expected_prev[58] !== last_contador_64_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[58] = contador_64_expected_prev[58];
	end
	if (
		( contador_64_expected_prev[59] !== 1'bx ) && ( contador_64_prev[59] !== contador_64_expected_prev[59] )
		&& ((contador_64_expected_prev[59] !== last_contador_64_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[59] = contador_64_expected_prev[59];
	end
	if (
		( contador_64_expected_prev[60] !== 1'bx ) && ( contador_64_prev[60] !== contador_64_expected_prev[60] )
		&& ((contador_64_expected_prev[60] !== last_contador_64_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[60] = contador_64_expected_prev[60];
	end
	if (
		( contador_64_expected_prev[61] !== 1'bx ) && ( contador_64_prev[61] !== contador_64_expected_prev[61] )
		&& ((contador_64_expected_prev[61] !== last_contador_64_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[61] = contador_64_expected_prev[61];
	end
	if (
		( contador_64_expected_prev[62] !== 1'bx ) && ( contador_64_prev[62] !== contador_64_expected_prev[62] )
		&& ((contador_64_expected_prev[62] !== last_contador_64_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[62] = contador_64_expected_prev[62];
	end
	if (
		( contador_64_expected_prev[63] !== 1'bx ) && ( contador_64_prev[63] !== contador_64_expected_prev[63] )
		&& ((contador_64_expected_prev[63] !== last_contador_64_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_64[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_64_expected_prev);
		$display ("     Real value = %b", contador_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_64_exp[63] = contador_64_expected_prev[63];
	end
	if (
		( instrucao_64_expected_prev[0] !== 1'bx ) && ( instrucao_64_prev[0] !== instrucao_64_expected_prev[0] )
		&& ((instrucao_64_expected_prev[0] !== last_instrucao_64_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[0] = instrucao_64_expected_prev[0];
	end
	if (
		( instrucao_64_expected_prev[1] !== 1'bx ) && ( instrucao_64_prev[1] !== instrucao_64_expected_prev[1] )
		&& ((instrucao_64_expected_prev[1] !== last_instrucao_64_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[1] = instrucao_64_expected_prev[1];
	end
	if (
		( instrucao_64_expected_prev[2] !== 1'bx ) && ( instrucao_64_prev[2] !== instrucao_64_expected_prev[2] )
		&& ((instrucao_64_expected_prev[2] !== last_instrucao_64_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[2] = instrucao_64_expected_prev[2];
	end
	if (
		( instrucao_64_expected_prev[3] !== 1'bx ) && ( instrucao_64_prev[3] !== instrucao_64_expected_prev[3] )
		&& ((instrucao_64_expected_prev[3] !== last_instrucao_64_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[3] = instrucao_64_expected_prev[3];
	end
	if (
		( instrucao_64_expected_prev[4] !== 1'bx ) && ( instrucao_64_prev[4] !== instrucao_64_expected_prev[4] )
		&& ((instrucao_64_expected_prev[4] !== last_instrucao_64_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[4] = instrucao_64_expected_prev[4];
	end
	if (
		( instrucao_64_expected_prev[5] !== 1'bx ) && ( instrucao_64_prev[5] !== instrucao_64_expected_prev[5] )
		&& ((instrucao_64_expected_prev[5] !== last_instrucao_64_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[5] = instrucao_64_expected_prev[5];
	end
	if (
		( instrucao_64_expected_prev[6] !== 1'bx ) && ( instrucao_64_prev[6] !== instrucao_64_expected_prev[6] )
		&& ((instrucao_64_expected_prev[6] !== last_instrucao_64_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[6] = instrucao_64_expected_prev[6];
	end
	if (
		( instrucao_64_expected_prev[7] !== 1'bx ) && ( instrucao_64_prev[7] !== instrucao_64_expected_prev[7] )
		&& ((instrucao_64_expected_prev[7] !== last_instrucao_64_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[7] = instrucao_64_expected_prev[7];
	end
	if (
		( instrucao_64_expected_prev[8] !== 1'bx ) && ( instrucao_64_prev[8] !== instrucao_64_expected_prev[8] )
		&& ((instrucao_64_expected_prev[8] !== last_instrucao_64_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[8] = instrucao_64_expected_prev[8];
	end
	if (
		( instrucao_64_expected_prev[9] !== 1'bx ) && ( instrucao_64_prev[9] !== instrucao_64_expected_prev[9] )
		&& ((instrucao_64_expected_prev[9] !== last_instrucao_64_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[9] = instrucao_64_expected_prev[9];
	end
	if (
		( instrucao_64_expected_prev[10] !== 1'bx ) && ( instrucao_64_prev[10] !== instrucao_64_expected_prev[10] )
		&& ((instrucao_64_expected_prev[10] !== last_instrucao_64_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[10] = instrucao_64_expected_prev[10];
	end
	if (
		( instrucao_64_expected_prev[11] !== 1'bx ) && ( instrucao_64_prev[11] !== instrucao_64_expected_prev[11] )
		&& ((instrucao_64_expected_prev[11] !== last_instrucao_64_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[11] = instrucao_64_expected_prev[11];
	end
	if (
		( instrucao_64_expected_prev[12] !== 1'bx ) && ( instrucao_64_prev[12] !== instrucao_64_expected_prev[12] )
		&& ((instrucao_64_expected_prev[12] !== last_instrucao_64_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[12] = instrucao_64_expected_prev[12];
	end
	if (
		( instrucao_64_expected_prev[13] !== 1'bx ) && ( instrucao_64_prev[13] !== instrucao_64_expected_prev[13] )
		&& ((instrucao_64_expected_prev[13] !== last_instrucao_64_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[13] = instrucao_64_expected_prev[13];
	end
	if (
		( instrucao_64_expected_prev[14] !== 1'bx ) && ( instrucao_64_prev[14] !== instrucao_64_expected_prev[14] )
		&& ((instrucao_64_expected_prev[14] !== last_instrucao_64_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[14] = instrucao_64_expected_prev[14];
	end
	if (
		( instrucao_64_expected_prev[15] !== 1'bx ) && ( instrucao_64_prev[15] !== instrucao_64_expected_prev[15] )
		&& ((instrucao_64_expected_prev[15] !== last_instrucao_64_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[15] = instrucao_64_expected_prev[15];
	end
	if (
		( instrucao_64_expected_prev[16] !== 1'bx ) && ( instrucao_64_prev[16] !== instrucao_64_expected_prev[16] )
		&& ((instrucao_64_expected_prev[16] !== last_instrucao_64_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[16] = instrucao_64_expected_prev[16];
	end
	if (
		( instrucao_64_expected_prev[17] !== 1'bx ) && ( instrucao_64_prev[17] !== instrucao_64_expected_prev[17] )
		&& ((instrucao_64_expected_prev[17] !== last_instrucao_64_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[17] = instrucao_64_expected_prev[17];
	end
	if (
		( instrucao_64_expected_prev[18] !== 1'bx ) && ( instrucao_64_prev[18] !== instrucao_64_expected_prev[18] )
		&& ((instrucao_64_expected_prev[18] !== last_instrucao_64_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[18] = instrucao_64_expected_prev[18];
	end
	if (
		( instrucao_64_expected_prev[19] !== 1'bx ) && ( instrucao_64_prev[19] !== instrucao_64_expected_prev[19] )
		&& ((instrucao_64_expected_prev[19] !== last_instrucao_64_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[19] = instrucao_64_expected_prev[19];
	end
	if (
		( instrucao_64_expected_prev[20] !== 1'bx ) && ( instrucao_64_prev[20] !== instrucao_64_expected_prev[20] )
		&& ((instrucao_64_expected_prev[20] !== last_instrucao_64_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[20] = instrucao_64_expected_prev[20];
	end
	if (
		( instrucao_64_expected_prev[21] !== 1'bx ) && ( instrucao_64_prev[21] !== instrucao_64_expected_prev[21] )
		&& ((instrucao_64_expected_prev[21] !== last_instrucao_64_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[21] = instrucao_64_expected_prev[21];
	end
	if (
		( instrucao_64_expected_prev[22] !== 1'bx ) && ( instrucao_64_prev[22] !== instrucao_64_expected_prev[22] )
		&& ((instrucao_64_expected_prev[22] !== last_instrucao_64_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[22] = instrucao_64_expected_prev[22];
	end
	if (
		( instrucao_64_expected_prev[23] !== 1'bx ) && ( instrucao_64_prev[23] !== instrucao_64_expected_prev[23] )
		&& ((instrucao_64_expected_prev[23] !== last_instrucao_64_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[23] = instrucao_64_expected_prev[23];
	end
	if (
		( instrucao_64_expected_prev[24] !== 1'bx ) && ( instrucao_64_prev[24] !== instrucao_64_expected_prev[24] )
		&& ((instrucao_64_expected_prev[24] !== last_instrucao_64_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[24] = instrucao_64_expected_prev[24];
	end
	if (
		( instrucao_64_expected_prev[25] !== 1'bx ) && ( instrucao_64_prev[25] !== instrucao_64_expected_prev[25] )
		&& ((instrucao_64_expected_prev[25] !== last_instrucao_64_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[25] = instrucao_64_expected_prev[25];
	end
	if (
		( instrucao_64_expected_prev[26] !== 1'bx ) && ( instrucao_64_prev[26] !== instrucao_64_expected_prev[26] )
		&& ((instrucao_64_expected_prev[26] !== last_instrucao_64_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[26] = instrucao_64_expected_prev[26];
	end
	if (
		( instrucao_64_expected_prev[27] !== 1'bx ) && ( instrucao_64_prev[27] !== instrucao_64_expected_prev[27] )
		&& ((instrucao_64_expected_prev[27] !== last_instrucao_64_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[27] = instrucao_64_expected_prev[27];
	end
	if (
		( instrucao_64_expected_prev[28] !== 1'bx ) && ( instrucao_64_prev[28] !== instrucao_64_expected_prev[28] )
		&& ((instrucao_64_expected_prev[28] !== last_instrucao_64_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[28] = instrucao_64_expected_prev[28];
	end
	if (
		( instrucao_64_expected_prev[29] !== 1'bx ) && ( instrucao_64_prev[29] !== instrucao_64_expected_prev[29] )
		&& ((instrucao_64_expected_prev[29] !== last_instrucao_64_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[29] = instrucao_64_expected_prev[29];
	end
	if (
		( instrucao_64_expected_prev[30] !== 1'bx ) && ( instrucao_64_prev[30] !== instrucao_64_expected_prev[30] )
		&& ((instrucao_64_expected_prev[30] !== last_instrucao_64_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[30] = instrucao_64_expected_prev[30];
	end
	if (
		( instrucao_64_expected_prev[31] !== 1'bx ) && ( instrucao_64_prev[31] !== instrucao_64_expected_prev[31] )
		&& ((instrucao_64_expected_prev[31] !== last_instrucao_64_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[31] = instrucao_64_expected_prev[31];
	end
	if (
		( instrucao_64_expected_prev[32] !== 1'bx ) && ( instrucao_64_prev[32] !== instrucao_64_expected_prev[32] )
		&& ((instrucao_64_expected_prev[32] !== last_instrucao_64_exp[32]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[32] = instrucao_64_expected_prev[32];
	end
	if (
		( instrucao_64_expected_prev[33] !== 1'bx ) && ( instrucao_64_prev[33] !== instrucao_64_expected_prev[33] )
		&& ((instrucao_64_expected_prev[33] !== last_instrucao_64_exp[33]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[33] = instrucao_64_expected_prev[33];
	end
	if (
		( instrucao_64_expected_prev[34] !== 1'bx ) && ( instrucao_64_prev[34] !== instrucao_64_expected_prev[34] )
		&& ((instrucao_64_expected_prev[34] !== last_instrucao_64_exp[34]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[34] = instrucao_64_expected_prev[34];
	end
	if (
		( instrucao_64_expected_prev[35] !== 1'bx ) && ( instrucao_64_prev[35] !== instrucao_64_expected_prev[35] )
		&& ((instrucao_64_expected_prev[35] !== last_instrucao_64_exp[35]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[35] = instrucao_64_expected_prev[35];
	end
	if (
		( instrucao_64_expected_prev[36] !== 1'bx ) && ( instrucao_64_prev[36] !== instrucao_64_expected_prev[36] )
		&& ((instrucao_64_expected_prev[36] !== last_instrucao_64_exp[36]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[36] = instrucao_64_expected_prev[36];
	end
	if (
		( instrucao_64_expected_prev[37] !== 1'bx ) && ( instrucao_64_prev[37] !== instrucao_64_expected_prev[37] )
		&& ((instrucao_64_expected_prev[37] !== last_instrucao_64_exp[37]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[37] = instrucao_64_expected_prev[37];
	end
	if (
		( instrucao_64_expected_prev[38] !== 1'bx ) && ( instrucao_64_prev[38] !== instrucao_64_expected_prev[38] )
		&& ((instrucao_64_expected_prev[38] !== last_instrucao_64_exp[38]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[38] = instrucao_64_expected_prev[38];
	end
	if (
		( instrucao_64_expected_prev[39] !== 1'bx ) && ( instrucao_64_prev[39] !== instrucao_64_expected_prev[39] )
		&& ((instrucao_64_expected_prev[39] !== last_instrucao_64_exp[39]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[39] = instrucao_64_expected_prev[39];
	end
	if (
		( instrucao_64_expected_prev[40] !== 1'bx ) && ( instrucao_64_prev[40] !== instrucao_64_expected_prev[40] )
		&& ((instrucao_64_expected_prev[40] !== last_instrucao_64_exp[40]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[40] = instrucao_64_expected_prev[40];
	end
	if (
		( instrucao_64_expected_prev[41] !== 1'bx ) && ( instrucao_64_prev[41] !== instrucao_64_expected_prev[41] )
		&& ((instrucao_64_expected_prev[41] !== last_instrucao_64_exp[41]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[41] = instrucao_64_expected_prev[41];
	end
	if (
		( instrucao_64_expected_prev[42] !== 1'bx ) && ( instrucao_64_prev[42] !== instrucao_64_expected_prev[42] )
		&& ((instrucao_64_expected_prev[42] !== last_instrucao_64_exp[42]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[42] = instrucao_64_expected_prev[42];
	end
	if (
		( instrucao_64_expected_prev[43] !== 1'bx ) && ( instrucao_64_prev[43] !== instrucao_64_expected_prev[43] )
		&& ((instrucao_64_expected_prev[43] !== last_instrucao_64_exp[43]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[43] = instrucao_64_expected_prev[43];
	end
	if (
		( instrucao_64_expected_prev[44] !== 1'bx ) && ( instrucao_64_prev[44] !== instrucao_64_expected_prev[44] )
		&& ((instrucao_64_expected_prev[44] !== last_instrucao_64_exp[44]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[44] = instrucao_64_expected_prev[44];
	end
	if (
		( instrucao_64_expected_prev[45] !== 1'bx ) && ( instrucao_64_prev[45] !== instrucao_64_expected_prev[45] )
		&& ((instrucao_64_expected_prev[45] !== last_instrucao_64_exp[45]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[45] = instrucao_64_expected_prev[45];
	end
	if (
		( instrucao_64_expected_prev[46] !== 1'bx ) && ( instrucao_64_prev[46] !== instrucao_64_expected_prev[46] )
		&& ((instrucao_64_expected_prev[46] !== last_instrucao_64_exp[46]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[46] = instrucao_64_expected_prev[46];
	end
	if (
		( instrucao_64_expected_prev[47] !== 1'bx ) && ( instrucao_64_prev[47] !== instrucao_64_expected_prev[47] )
		&& ((instrucao_64_expected_prev[47] !== last_instrucao_64_exp[47]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[47] = instrucao_64_expected_prev[47];
	end
	if (
		( instrucao_64_expected_prev[48] !== 1'bx ) && ( instrucao_64_prev[48] !== instrucao_64_expected_prev[48] )
		&& ((instrucao_64_expected_prev[48] !== last_instrucao_64_exp[48]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[48] = instrucao_64_expected_prev[48];
	end
	if (
		( instrucao_64_expected_prev[49] !== 1'bx ) && ( instrucao_64_prev[49] !== instrucao_64_expected_prev[49] )
		&& ((instrucao_64_expected_prev[49] !== last_instrucao_64_exp[49]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[49] = instrucao_64_expected_prev[49];
	end
	if (
		( instrucao_64_expected_prev[50] !== 1'bx ) && ( instrucao_64_prev[50] !== instrucao_64_expected_prev[50] )
		&& ((instrucao_64_expected_prev[50] !== last_instrucao_64_exp[50]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[50] = instrucao_64_expected_prev[50];
	end
	if (
		( instrucao_64_expected_prev[51] !== 1'bx ) && ( instrucao_64_prev[51] !== instrucao_64_expected_prev[51] )
		&& ((instrucao_64_expected_prev[51] !== last_instrucao_64_exp[51]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[51] = instrucao_64_expected_prev[51];
	end
	if (
		( instrucao_64_expected_prev[52] !== 1'bx ) && ( instrucao_64_prev[52] !== instrucao_64_expected_prev[52] )
		&& ((instrucao_64_expected_prev[52] !== last_instrucao_64_exp[52]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[52] = instrucao_64_expected_prev[52];
	end
	if (
		( instrucao_64_expected_prev[53] !== 1'bx ) && ( instrucao_64_prev[53] !== instrucao_64_expected_prev[53] )
		&& ((instrucao_64_expected_prev[53] !== last_instrucao_64_exp[53]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[53] = instrucao_64_expected_prev[53];
	end
	if (
		( instrucao_64_expected_prev[54] !== 1'bx ) && ( instrucao_64_prev[54] !== instrucao_64_expected_prev[54] )
		&& ((instrucao_64_expected_prev[54] !== last_instrucao_64_exp[54]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[54] = instrucao_64_expected_prev[54];
	end
	if (
		( instrucao_64_expected_prev[55] !== 1'bx ) && ( instrucao_64_prev[55] !== instrucao_64_expected_prev[55] )
		&& ((instrucao_64_expected_prev[55] !== last_instrucao_64_exp[55]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[55] = instrucao_64_expected_prev[55];
	end
	if (
		( instrucao_64_expected_prev[56] !== 1'bx ) && ( instrucao_64_prev[56] !== instrucao_64_expected_prev[56] )
		&& ((instrucao_64_expected_prev[56] !== last_instrucao_64_exp[56]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[56] = instrucao_64_expected_prev[56];
	end
	if (
		( instrucao_64_expected_prev[57] !== 1'bx ) && ( instrucao_64_prev[57] !== instrucao_64_expected_prev[57] )
		&& ((instrucao_64_expected_prev[57] !== last_instrucao_64_exp[57]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[57] = instrucao_64_expected_prev[57];
	end
	if (
		( instrucao_64_expected_prev[58] !== 1'bx ) && ( instrucao_64_prev[58] !== instrucao_64_expected_prev[58] )
		&& ((instrucao_64_expected_prev[58] !== last_instrucao_64_exp[58]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[58] = instrucao_64_expected_prev[58];
	end
	if (
		( instrucao_64_expected_prev[59] !== 1'bx ) && ( instrucao_64_prev[59] !== instrucao_64_expected_prev[59] )
		&& ((instrucao_64_expected_prev[59] !== last_instrucao_64_exp[59]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[59] = instrucao_64_expected_prev[59];
	end
	if (
		( instrucao_64_expected_prev[60] !== 1'bx ) && ( instrucao_64_prev[60] !== instrucao_64_expected_prev[60] )
		&& ((instrucao_64_expected_prev[60] !== last_instrucao_64_exp[60]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[60] = instrucao_64_expected_prev[60];
	end
	if (
		( instrucao_64_expected_prev[61] !== 1'bx ) && ( instrucao_64_prev[61] !== instrucao_64_expected_prev[61] )
		&& ((instrucao_64_expected_prev[61] !== last_instrucao_64_exp[61]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[61] = instrucao_64_expected_prev[61];
	end
	if (
		( instrucao_64_expected_prev[62] !== 1'bx ) && ( instrucao_64_prev[62] !== instrucao_64_expected_prev[62] )
		&& ((instrucao_64_expected_prev[62] !== last_instrucao_64_exp[62]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[62] = instrucao_64_expected_prev[62];
	end
	if (
		( instrucao_64_expected_prev[63] !== 1'bx ) && ( instrucao_64_prev[63] !== instrucao_64_expected_prev[63] )
		&& ((instrucao_64_expected_prev[63] !== last_instrucao_64_exp[63]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_64[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_64_expected_prev);
		$display ("     Real value = %b", instrucao_64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instrucao_64_exp[63] = instrucao_64_expected_prev[63];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module extensor_sinal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] contador;
reg [31:0] instrucao;
// wires                                               
wire [63:0] contador_64;
wire [63:0] instrucao_64;

wire sampler;                             

// assign statements (if any)                          
extensor_sinal i1 (
// port map - connection between master ports and signals/registers   
	.contador(contador),
	.contador_64(contador_64),
	.instrucao(instrucao),
	.instrucao_64(instrucao_64)
);
// contador[ 11 ]
initial
begin
	contador[11] = 1'b1;
end 
// contador[ 10 ]
initial
begin
	contador[10] = 1'b0;
end 
// contador[ 9 ]
initial
begin
	contador[9] = 1'b0;
end 
// contador[ 8 ]
initial
begin
	contador[8] = 1'b0;
end 
// contador[ 7 ]
initial
begin
	contador[7] = 1'b0;
end 
// contador[ 6 ]
initial
begin
	contador[6] = 1'b0;
end 
// contador[ 5 ]
initial
begin
	contador[5] = 1'b0;
end 
// contador[ 4 ]
initial
begin
	contador[4] = 1'b0;
end 
// contador[ 3 ]
initial
begin
	contador[3] = 1'b0;
end 
// contador[ 2 ]
initial
begin
	contador[2] = 1'b0;
end 
// contador[ 1 ]
initial
begin
	contador[1] = 1'b0;
end 
// contador[ 0 ]
initial
begin
	contador[0] = 1'b0;
end 
// instrucao[ 31 ]
initial
begin
	instrucao[31] = 1'b1;
end 
// instrucao[ 30 ]
initial
begin
	instrucao[30] = 1'b1;
end 
// instrucao[ 29 ]
initial
begin
	instrucao[29] = 1'b0;
end 
// instrucao[ 28 ]
initial
begin
	instrucao[28] = 1'b0;
end 
// instrucao[ 27 ]
initial
begin
	instrucao[27] = 1'b0;
end 
// instrucao[ 26 ]
initial
begin
	instrucao[26] = 1'b0;
end 
// instrucao[ 25 ]
initial
begin
	instrucao[25] = 1'b0;
end 
// instrucao[ 24 ]
initial
begin
	instrucao[24] = 1'b0;
end 
// instrucao[ 23 ]
initial
begin
	instrucao[23] = 1'b0;
end 
// instrucao[ 22 ]
initial
begin
	instrucao[22] = 1'b0;
end 
// instrucao[ 21 ]
initial
begin
	instrucao[21] = 1'b0;
end 
// instrucao[ 20 ]
initial
begin
	instrucao[20] = 1'b0;
end 
// instrucao[ 19 ]
initial
begin
	instrucao[19] = 1'b0;
end 
// instrucao[ 18 ]
initial
begin
	instrucao[18] = 1'b0;
end 
// instrucao[ 17 ]
initial
begin
	instrucao[17] = 1'b0;
end 
// instrucao[ 16 ]
initial
begin
	instrucao[16] = 1'b0;
end 
// instrucao[ 15 ]
initial
begin
	instrucao[15] = 1'b0;
end 
// instrucao[ 14 ]
initial
begin
	instrucao[14] = 1'b0;
end 
// instrucao[ 13 ]
initial
begin
	instrucao[13] = 1'b1;
end 
// instrucao[ 12 ]
initial
begin
	instrucao[12] = 1'b0;
end 
// instrucao[ 11 ]
initial
begin
	instrucao[11] = 1'b0;
end 
// instrucao[ 10 ]
initial
begin
	instrucao[10] = 1'b0;
end 
// instrucao[ 9 ]
initial
begin
	instrucao[9] = 1'b0;
end 
// instrucao[ 8 ]
initial
begin
	instrucao[8] = 1'b0;
end 
// instrucao[ 7 ]
initial
begin
	instrucao[7] = 1'b0;
end 
// instrucao[ 6 ]
initial
begin
	instrucao[6] = 1'b0;
end 
// instrucao[ 5 ]
initial
begin
	instrucao[5] = 1'b0;
end 
// instrucao[ 4 ]
initial
begin
	instrucao[4] = 1'b1;
end 
// instrucao[ 3 ]
initial
begin
	instrucao[3] = 1'b0;
end 
// instrucao[ 2 ]
initial
begin
	instrucao[2] = 1'b0;
end 
// instrucao[ 1 ]
initial
begin
	instrucao[1] = 1'b1;
end 
// instrucao[ 0 ]
initial
begin
	instrucao[0] = 1'b1;
end 

extensor_sinal_vlg_sample_tst tb_sample (
	.contador(contador),
	.instrucao(instrucao),
	.sampler_tx(sampler)
);

extensor_sinal_vlg_check_tst tb_out(
	.contador_64(contador_64),
	.instrucao_64(instrucao_64),
	.sampler_rx(sampler)
);
endmodule

